<?xml version="1.1" encoding="UTF-8"?><project>
  <actions/>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>DELETE_VOLUMES</name>
          <description>Must be selected on the first run of each subproject</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>SUBPROJECT</name>
          <description/>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              {{SUBPROJECT_OPTIONS}}
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>COMP_RAM</name>
          <description>How many gigabytes of RAM memory is a comp allowed to use.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>1</string>
              <string>2</string>
              <string>4</string>
              <string>8</string>
              <string>16</string>
              <string>32</string>
              <string>40</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>COMP_SLOTS</name>
          <description>How many job slots is one comp allowed to run at the same time. In production this is COMP_RAM / 8.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2</string>
              <string>1</string>
              <string>3</string>
              <string>4</string>
              <string>5</string>
              <string>10</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>COMP_CPU</name>
          <description>How many CPU cores is comp allowed to use. Use 2 by default or 8 if the tool can use that many.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2</string>
              <string>8</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <org.biouno.unochoice.ChoiceParameter plugin="uno-choice@2.1">
          <name>TOOLS_BIN_VERSION</name>
          <description>The options are taken from the object storage and may contain choices that haven't been downloaded to OpenShift yet. Use the Jenkins job download-tools-bin-from-object-storage to see if the version is downloaded already or to download it.</description>
          <randomName>choice-parameter-3543489150877066</randomName>
          <visibleItemCount>1</visibleItemCount>
          <script class="org.biouno.unochoice.model.GroovyScript">
            <secureScript plugin="script-security@1.48">
              <script>// Set the URL we want to read from, it is MySQL from official Library for this example, limited to 20 results only.
url = "https://object.pouta.csc.fi/swift/v1/AUTH_chipcld/chipster-tools-bin/"
try {
    def http_client = new URL(url).openConnection() as HttpURLConnection
    http_client.setRequestMethod('GET')
    http_client.connect()
    def response = ""
    if (http_client.responseCode == 200) {
        response = http_client.inputStream.getText('UTF-8')
    } else {
        println("HTTP response error")
        System.exit(0)
    }
    def list = response.readLines().collect { it.split("/")[0] }
    return list.sort()
} catch (Exception e) {
         println(e)
}</script>
              <sandbox>false</sandbox>
            </secureScript>
            <secureFallbackScript plugin="script-security@1.48">
              <script/>
              <sandbox>false</sandbox>
            </secureFallbackScript>
          </script>
          <projectName>deploy-chipster</projectName>
          <choiceType>PT_SINGLE_SELECT</choiceType>
          <filterable>false</filterable>
          <filterLength>1</filterLength>
        </org.biouno.unochoice.ChoiceParameter>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/chipster/chipster-openshift.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>chipster-openshift</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
      
set -e
set +x

OPENSHIFT_PROJECT="$(cat $OPENSHIFT_PROJECT_PATH)"
DEPLOY_CONF="$(cat $DEPLOY_CONF_PATH)"
CHIPSTER_DEV_PATCH="$(cat $CHIPSTER_DEV_PATCH_PATH)"
      
if [ -d chipster-web-server ]; then
  pushd chipster-web-server; git pull; popd
else
  git clone --depth=1 https://github.com/chipster/chipster-web-server.git
fi

if [ -d chipster-web ]; then
  pushd chipster-web; git pull; popd
else
  git clone --depth=1 https://github.com/chipster/chipster-web.git
fi

oc login https://rahti.csc.fi:8443 --token=$OPENSHIFT_TOKEN

oc project $OPENSHIFT_PROJECT

project="$(oc project -q)"
if [ "$project" != $OPENSHIFT_PROJECT ]; then
  echo "project change failed, stop here"
  exit 1
fi

mkdir -p chipster-private/confs/chipster-all
mkdir -p chipster-private/confs/rahti-int

echo "$DEPLOY_CONF" &gt; chipster-private/confs/chipster-all/deploy.yaml
echo "$USERS_CONF" &gt; chipster-private/confs/chipster-all/users
echo "$CHIPSTER_DEV_PATCH" &gt; chipster-private/confs/chipster-all/chipster-template-patch.bash

# chipster-all is actually a place for organization wide configs, but we can use it to configure individual installations
# as long as these jobs are not run in parallel in Jenkins  
echo "comp-max-jobs: $COMP_SLOTS" &gt; chipster-private/confs/chipster-all/comp.yaml
echo "tools-bin: $TOOLS_BIN_VERSION" &gt; chipster-private/confs/chipster-all/deploy.yaml

COMP_RAM_MB=$(($COMP_RAM * 1000 - 100))
COMP_CPU_MILLIS=$(($COMP_CPU * 1000 - 100))
COMP_RAM_MB_REQUEST=$(($COMP_RAM_MB / 2))
COMP_CPU_MILLIS_REQUEST=$(($COMP_CPU_MILLIS / 2))

echo "
source scripts/utils.bash

template_dir="\$1"
subproject_postfix="\$2"

patch_kind_and_name \$template_dir/comp.yaml DeploymentConfig comp-$SUBPROJECT \"
  spec.template.spec.containers[0].resources.limits.cpu: ${COMP_CPU_MILLIS}m
  spec.template.spec.containers[0].resources.limits.memory: ${COMP_RAM_MB}Mi
  spec.template.spec.containers[0].resources.requests.cpu: ${COMP_CPU_MILLIS_REQUEST}m
  spec.template.spec.containers[0].resources.requests.memory: ${COMP_RAM_MB_REQUEST}Mi
\" true
" &gt;&gt; chipster-private/confs/chipster-all/chipster-template-patch.bash


pushd chipster-openshift

source scripts/utils.bash

subproject="$SUBPROJECT"


echo DELETE_VOLUMES "$DELETE_VOLUMES"

if [ $DELETE_VOLUMES == "true" ]; then
  bash remove-servers.bash $subproject
  
  oc delete all -l subproject=${subproject}-db
  oc delete secret -l subproject=${subproject}-db
  
  if oc get secret passwords-${subproject} > /dev/null; then
  	oc delete secret passwords-${subproject}
  fi
  
  oc delete pvc -l subproject=$subproject
  t=30
  echo "Waiting $t seconds to make sure OpenShift has removed everything"
  sleep $t
fi


if [ $DELETE_VOLUMES == "true" ]; then
  bash generate-passwords.bash $subproject
  bash deploy-postgres.bash $subproject
fi

bash create-secrets.bash $subproject

bash deploy-servers.bash $subproject

if [ $DELETE_VOLUMES == "true" ]; then
  bash setup.bash $subproject
fi

wait_dc web-server-$subproject

echo "The application is available in"
echo https://$(oc get route web-server-$subproject -o json | jq .spec.host -r)
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.15">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
          <credentialsId>OPENSHIFT_TOKEN</credentialsId>
          <variable>OPENSHIFT_TOKEN</variable>
        </org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
        <org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
          <credentialsId>USERS_CONF</credentialsId>
          <variable>USERS_CONF</variable>
        </org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <org.jenkinsci.plugins.configfiles.buildwrapper.ConfigFileBuildWrapper plugin="config-file-provider@3.2">
      <managedFiles>
        <org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile>
          <fileId>DEPLOY_CONF</fileId>
          <replaceTokens>false</replaceTokens>
          <variable>DEPLOY_CONF_PATH</variable>
        </org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile>
        <org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile>
          <fileId>OPENSHIFT_PROJECT</fileId>
          <replaceTokens>false</replaceTokens>
          <variable>OPENSHIFT_PROJECT_PATH</variable>
        </org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile>
        <org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile>
          <fileId>CHIPSTER_DEV_PATCH</fileId>
          <replaceTokens>false</replaceTokens>
          <variable>CHIPSTER_DEV_PATCH_PATH</variable>
        </org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile>
      </managedFiles>
    </org.jenkinsci.plugins.configfiles.buildwrapper.ConfigFileBuildWrapper>
  </buildWrappers>
</project>