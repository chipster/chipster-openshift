<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.29">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>DELETE_VOLUMES</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>SUBPROJECT</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              {{SUBPROJECT_OPTIONS}}
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>COMP_RAM</name>
          <description>How many gigabytes of RAM memory is a comp allowed to use.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>1</string>
              <string>2</string>
              <string>4</string>
              <string>8</string>
              <string>16</string>
              <string>32</string>
              <string>40</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>COMP_SLOTS</name>
          <description>How many job slots is one comp allowed to run at the same time. In production this is COMP_RAM / 8.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2</string>
              <string>1</string>
              <string>3</string>
              <string>4</string>
              <string>5</string>
              <string>10</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>COMP_CPU</name>
          <description>How many CPU cores is comp allowed to use. Use 2 by default or 8 if the tool can use that many.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>2</string>
              <string>8</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/chipster/chipster-openshift.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>chipster-openshift</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
    </extensions>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
      
set -e
set +x

OPENSHIFT_PROJECT=&quot;$(cat $OPENSHIFT_PROJECT_PATH)&quot;
DEPLOY_CONF=&quot;$(cat $DEPLOY_CONF_PATH)&quot;
      
if [ -d chipster-web-server ]; then
  pushd chipster-web-server; git pull; popd
else
  git clone --depth=1 https://github.com/chipster/chipster-web-server.git
fi

if [ -d chipster-web ]; then
  pushd chipster-web; git pull; popd
else
  git clone --depth=1 https://github.com/chipster/chipster-web.git
fi

oc login https://rahti.csc.fi:8443 --token=$OPENSHIFT_TOKEN

oc project $OPENSHIFT_PROJECT

project=&quot;$(oc project -q)&quot;
if [ &quot;$project&quot; != $OPENSHIFT_PROJECT ]; then
  echo &quot;project change failed, stop here&quot;
  exit 1
fi

mkdir -p chipster-private/confs/chipster-all
mkdir -p chipster-private/confs/rahti-int

echo &quot;$DEPLOY_CONF&quot; &gt; chipster-private/confs/chipster-all/deploy.yaml
echo &quot;$USERS_CONF&quot; &gt; chipster-private/confs/chipster-all/users

# chipster-all is actually a place for organization wide configs, but we can use it to configure individual installations
# as long as these jobs are not run in parallel in Jenkins  
echo &quot;comp-max-jobs: $COMP_SLOTS&quot; &gt; chipster-private/confs/chipster-all/comp.yaml

COMP_RAM_MB=$(($COMP_RAM * 1000 - 100))
COMP_CPU_MILLIS=$(($COMP_CPU * 1000 - 100))
COMP_RAM_MB_REQUEST=$(($COMP_RAM_MB / 2))
COMP_CPU_MILLIS_REQUEST=$(($COMP_CPU_MILLIS / 2))

echo &quot;
source scripts/utils.bash

patch_kind_and_name \$1/comp.yaml DeploymentConfig comp-$SUBPROJECT \&quot;
  spec.template.spec.containers[0].resources.limits.cpu: ${COMP_CPU_MILLIS}m
  spec.template.spec.containers[0].resources.limits.memory: ${COMP_RAM_MB}Mi
  spec.template.spec.containers[0].resources.requests.cpu: ${COMP_CPU_MILLIS_REQUEST}m
  spec.template.spec.containers[0].resources.requests.memory: ${COMP_RAM_MB_REQUEST}Mi
\&quot; true

&quot; &gt; chipster-private/confs/chipster-all/chipster-template-patch.bash

# ldap won&apos;t work, but the script wants this
touch chipster-private/confs/rahti-int/jaas.config 

pushd chipster-openshift

source scripts/utils.bash

subproject=&quot;$SUBPROJECT&quot;

bash remove-servers.bash $subproject

echo DELETE_VOLUMES &quot;$DELETE_VOLUMES&quot;

if [ $DELETE_VOLUMES == &quot;true&quot; ]; then
  oc delete all -l subproject=${subproject}-db
  oc delete secret -l subproject=${subproject}-db
  oc delete pvc -l subproject=$subproject
  t=5
  echo &quot;Waiting $t minutes to make sure OpenShift has garbage collected PVC services&quot;
  sleep $(($t * 60))
fi


if [ $DELETE_VOLUMES == &quot;true&quot; ]; then
  bash generate-passwords.bash $subproject
  bash deploy-postgres.bash $subproject
fi

bash create-secrets.bash $subproject

bash deploy-servers.bash $subproject

bash setup.bash $subproject

wait_dc web-server-$subproject

echo &quot;The application is available in&quot;
echo https://$(oc get route web-server-$subproject -o json | jq .spec.host -r)
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.15">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
          <credentialsId>OPENSHIFT_TOKEN</credentialsId>
          <variable>OPENSHIFT_TOKEN</variable>
        </org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
        <org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
          <credentialsId>USERS_CONF</credentialsId>
          <variable>USERS_CONF</variable>
        </org.jenkinsci.plugins.credentialsbinding.impl.StringBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
    <org.jenkinsci.plugins.configfiles.buildwrapper.ConfigFileBuildWrapper plugin="config-file-provider@3.2">
      <managedFiles>
        <org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile>
          <fileId>DEPLOY_CONF</fileId>
          <replaceTokens>false</replaceTokens>
          <variable>DEPLOY_CONF_PATH</variable>
        </org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile>
        <org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile>
          <fileId>OPENSHIFT_PROJECT</fileId>
          <replaceTokens>false</replaceTokens>
          <variable>OPENSHIFT_PROJECT_PATH</variable>
        </org.jenkinsci.plugins.configfiles.buildwrapper.ManagedFile>
      </managedFiles>
    </org.jenkinsci.plugins.configfiles.buildwrapper.ConfigFileBuildWrapper>
  </buildWrappers>
</project>